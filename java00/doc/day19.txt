# JDBC

JDBC
	==> 자바 프로그램을 이용해서 데이터베이스를 컨트롤 할 수 있는 외부 API이다.
	
	배경 ]
		
		데이터베이스는 그 데이터베이스가 가진 DBMS에 의해서 성능이 결정된다.
		즉, 각각의 데이터베이스마다 질의명령을 처리하는 방법(DBMS)이 다르다.
		==>
		데이터베이스마다 그 데이터베이스의 DBMS에 따라서 프로그램 방식을 다르게 해야 한다.
		
	해결방법 ]
		자바 내부에 DBMS를 만들어 놓고
		개발자는 자바의 DBMS에게만 명령을 내리도록 해 놓았다.
		(개발자는 한가지 방식으로만 처리하도록 해 놓았다.)
		자바 내부에 있는 DBMS가 실제 데이터베이스와 연결해서 처리하도록 해 놓았다.
		
		이렇게 자바 내부에 만든 DBMS가 바로 JDBC 이다.
		하지만
		우리가 JDBC를 배운다는 것은
		결국 우리는 JDBC에게만 명령을 내리면(한가지 방식으로 명령을 내리면..)
		JDBC가 알아서 필요한 데이터베이스의 DBMS에게 명령을 전달하게 된다.
		
	참고 ]
		JDBC와 실제 DMBS를 연결하는 프로그램은
		실제 해당 데이터베이스를 만든 회사에서 제공한다.
		
------------------------------------------------------------------------

***
자바 개발자(데이터베이스 처리를 원하는)가 가장 먼저 해야 할 일
	1. 사용하려는 데이터베이스와 JDBC를 연결하는 프로그램을 찾아내는 것
		이때 이 프로그램을 우리는 "JDBC Driver"라고 부른다.
	
	2. 찾아낸 외부 API를 이클립스에 등록해서 이클립스에서
		이 외부 API를 사용할 수 있도록 조치를 해야 한다.
		(외부 API 등록하는 방법)
			1. 프로젝트에서 마우스오른쪽버튼을 누르고 맨 하단의 Properties 메뉴를 선택한다.
			2. 왼쪽 메뉴에서 Java Build Path 를 선택한다.
			3. 가운데 창에서 3번째 탭(Libraries)를 선택한다.
			4. 오른쪽 버튼 중
					Add External JARs
				버튼을 클릭해서 다운받은 드라이버를 선택한다. 
				JDBC
	
	참고 ]
		인터페이스로 만들어 놓은 이유
			==> 세션을 관리하는 방법이 각 DBMS마다 다르다.
				접속하는 순간 함수의 기능을 거기 맞도록 조절할 목적으로...
				
		JDBC 프로그래밍
			
			0. JDBC 드라이버를 구한다.
			1. 드라이버를 로딩한다.
				Class.forName()
			2. 데이터베이스에 접속을 한다.
				Connection con = DriverManager.getConnetion();
		
			============ 여기까지 각 데이터베이스들 마다 달라지는 부분 ===========
		
			3. JDBC와 실제 DBMS 사이에 명령을 전달 할 수 있는 도구를 만들어야 한다.
				(오라클은 서버 데이터베이스이다.
				즉, 프로그램이 동작하는 컴퓨터와 데이터베이스가 있는 컴퓨터는 다를 수 있다.)
				
				사용하는 클래스 (인터페이스) Statement
				
					만드는 방법
						Statement stmt = con.createStatement();
				
				참고 ]
					질의명령을 실행방법
						(Statement에 질의 명령을 실어서 보내는 방법)
						
						1. execute(String sql)
							==> 질의 실행 후 JDBC에게 보고하지 않는다.
								반환값은 boolean 인데
								질의명령의 실행여부를 알려주는 것이 아니고
								질의명령의 전달여부만 알려주는 것.
								
								질의의 실행여부와는 전혀 상관없다.
							
							주로 실행여부에 관계없는 명령...
								CREATE, INSERT, ...에 주로 사용
								
						2. executeQuery(String sql)
							반환값이 ResultSet인데
							질의 명령의 실행결과 탄생하는 인라인테이블을 관리하는 클래스
							
							100% SELECT 질의명령에 사용된다.
							
							
						3. executeUpdate(String sql)
							반환값이 int 인데
							이 반환값의 의미는 질의를 실행한 결과
							변화된 데이터의 숫자를 의미
							
							예 ]
								update 명령으로 변경된 행 수
								delete 명령으로 삭제된 행 수
							
							주로 질의 명령의 실행 결과 여부를 판단해야 할 경우 사용하는 명령
								UPDATE, DELETE, ..
								
				아무것이나 사용해도 원칙적으로 가능하다.
			
		
		