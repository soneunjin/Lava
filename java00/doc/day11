# day11

생성자 함수(Constructor)

	==> 클래스를 사용하기 위해서 new 시키는 순간 자동 실행되는 함수
	
		즉, 클래스를 new 한다는 개념은
		오브젝트(객체)로 만들어서 실행을 한다는 개념이다.
		따라서 이때 실행된다는 개념은
		결국 오브젝트를 만드는 순간에 뭔가를 실행한다는 개념이다.
		이것은 물건을 만들때 필요한 뭔가 조치를 해야 한다는 개념이 된다.
		==> 결론]
				객체를 실제로 만들기 위한 함수
				
		클래스는 한가지 목적을 달성하기 위해서 만들어지는 프로그램의 단위이다.
		이 안에는 그 목적을 달성하기 위한 변수, 함수로 구성이 된다.
		하지만 그 목적을 달성하기 위해서 가장 기본적으로 해줘야할 조치가 필요한 경우가 있을 것이다.
		
		예 ]
			String
				문자열을 관리하기 위한 목적으로 만들어진 클래스
				==> 문자열을 기억하고 있어야 한다.
					==> String()
						String(문자열);
						
			FileOutputStream
				파일에 내용을 기록하기 위한 목적으로 만들어진 클래스
				==> 파일을 사용할 수 있도록 열어둬야 한다.
				
			Socket
				네트워크를 구성하기 위한 목적으로 만들어진 클래스
				==> 상대방과 접속은 이루어져야 할 것이다.
				
		프로그램은 프로그램답게 뭔가를 처리하기 위해서는 기능(함수)가 필요하고
		위의 경우를 비춰보면 각각의 클래스는 객체가되는 순간
		그 클래스의 최소한의 일을 할 필요가 있다.
		
		바로 이런 일을 하기 위해서 만들어 놓은 함수를
			"생성자함수(Constructor)"
		라고 부른다.
		
		즉, 우리가 생성자 함수를 만드는 이유는???
		만들고자 하는 클래스의 목적에 따라
		그 클래스가 해야 할 가장 기본적인 일을 처리하기 위해 만드는 것이다.
		
		생성자 함수 만드는 방법 ]
			
			규칙 ]
				
				1. 함수의 이름은 반드시 클래스의 이름과 대소문자까지 동일해야 한다.
				2. 반환값은 절대로 가지면 안되고 void라고 써도 안된다.
				3. 매개변수는 가질 수 있다.
				
			예 ]
				
				class Test{
					Test(){
					// 생성자 함수이다.
					이 안에 이 클래스가 해야할 가장 기본적인 내용을 코딩하면 된다.
				}
				Test(int a) {
					// 매개변수가 있는 생성자 함수
				}
				
				void Test(){}	==> 반환값 타입이 붙는 순간 일반함수가 된다.
				
				}
				
			참고 ]
				생성자 함수는 오버로딩이 가능하다.
				
				==> 왜??
					필요하면 그 클래스가 기본적으로 해야할 일이 조금씩 달라질 수 있기 때문에...
					
				방법 ]
					매개변수의 갯수, 순서, 형태 중 하나이상을 달리함으로써
					생성자 함수를 여러개 만들어 놓을 수 있다.
					
				문제 ]
					여러개의 생성자 함수가 있다는 사실은
					new 시킬때 호출하는 생성자 함수를 선택할 수 있어야 한다.
					
					==> 우리가 new 시키는 문법을 살펴보면 해답이 보인다.
						new 시키는 문법은 생성자 함수를 호출하는 문법이다.
						
					예 ]
						class Test{
							Test(){}
							Test(int a){}
							
						}
						
						==> 객체를 만들때
							
							new Test();
							new Test(10);
							
							<== 두 가지 모두 Test 클래스에서 정의 해놓은 생성자 함수이므로
								두 가지 모두 객체를 만들 수 있다.
								
					결론 ]
						매개변수가 있는 생성자 함수를 호출하기 위해서는
						new 시킬때 매개변수에 필요한 데이터를 입력하면서
						new 시키면 된다.
						
			참고]
				기본 생성자 함수(Default Constructor)
				==> 매개변수가 하나도 없는 생성자 함수를 부르는 용어
				
				*****
				자바는 생성자 함수가 없어도 new 명령으로 객체를 만들 수 있다.
				하지만 이것은 생성자 함수를 이용하지 않는 것이 아니다.
				JVM(자바가상머신)이 기본 생성자를 내부적으로 만들어 준 후
				이 생성자 함수를 호출하는 것이다.
				
				결국
				자바는 new 시킬때마다 반드시 생성자 함수를 이용하게 된다.
				
				*****
				만약 개발자가 생성자 함수를 단 한개라도 정의를 하면(만들면)
				JVM은 기본생성자함수를 만들어 주지 않는다.
				즉, 내부적으로 기본 생성자 함수를 만드는 경우는
				오직 개발자가 생성자 함수를 한개라도 정의하지(만들지)않았을 경우에 한해서 만든다.
				
		생성자 함수 이용방법 ]
			
			결론 ]
				생성자 함수는 그 클래스를 어떻게 new 시킬지 알려주는 함수이다.
				어떻게 객체를 만들지 알려주는 함수...
				
				따라서 생성자함수가 요구하는 매개변수가 무엇인지를 보면
				그 클래스를 객체로 생성할 수 있는 방법이 도출된다.
				
		참고 ]
			여러분이 클래스를 만들때는
			그 클래스를 객체로 만들 수 있는 다양한 방식을
			생성자 함수를 이용해서 만들어 주는 것이 좋다.
			

	**********
 	참고 ]
 		
 		this()
 		==> 생성자 함수는 원칙적으로 개발자가 직접 호출할 수 없다.
 		
 			현재 생성자를 실행하는 도중에
 			다른 생성자를 강제로 호출하는 유일한 방법
 			
 		***
 		규칙 ]
 			1. 반드시 생성자 안에서만 사용해야 한다.
 				일반함수 안에서는 사용할 수 없다.
 			2. 반드시 생성자 함수의 첫줄, 첫문장으로 사용해야 한다.
 				이전에 다른 문장이 있으면 에러가 발생한다.
 				
 				
 		왜 사용해야하는가???
 			
 			==> 클래스는 한가지 목적을 가진 프로그램의 집합이다.
 				물론 기본적인 작업이 조금은 달라질 수 있지만
 				그 틀 자체는 변하지 않을 것이다.
 				
 				예]
 					Socket은 접속할 대상의 주소와 포트번호는 바뀌겠지만
 					결론은 접속을 시도해야 할 것이다.
 					String은 데이터의 형태가 달라지겠지만
 					결론은 문자열을 만들어야 할 것이다.
 					
 				따라서 생성자 함수가 하는 기능은 거의 비슷할 것이다.
 				기능이 비슷하다는 의미는 코딩 내용도 거의 동일하다는 말이다.
 				그런데
 				생성자 함수가 여러개면
 				같은 코드의 내용이 중복되어서 들어가야 할 것이다.
 				이 작업을 조금이라도 단순화 시켜주기 위해서
 				생성자 끼리는 서로 필요하면 상대방을 이용할 수 있게
 				만들어 놓은 기법이다.

----------------------------------------------------------------------------------------------

this
	==> 교과서적인 의미로
		현재 실행중인 오브젝트의 주소를 기억하는 약속된 변수
		
		이것은 JVM이 클래스를 처리하기 위해서 JVM이 사용하는 변수
		즉, 개발자는 거의 사용하지 않는다.
		
		규칙
			1. 모든 멤버는 사용할 때 반드시 앞에 주소가 있어야 한다.
				멤버는 클래스 내의 함수나 변수를 부르는 말이다.
				
				그래서 new 를 시킨 후 그 주소를 기억해 놓았다가
				그 주소를 이용해서 사용하는 것이다.
				
			2. 만약 주소가 없으면 JVM이 자동적으로 this를 붙여준다.
			
			3. 멤버 함수를 호출할 때는 무조건 주소값을 함수한테 알려주도록 약속을 했다.
				함수는 this 변수를 준비한 후
				함수를 호출할 때 알려준 주소를 기억하게 된다.
				
		
		참고 ]
			딱 한번 this를 개발자가 사용해야 하는 경우가 있다.
			
			가끔은 지역변수와 멤버변수가 이름이 동일하게 만드는 경우가 발생한다.
			이러면 그 함수는 지역변수를 우선 사용하게 된다.
			따라서 멤버 변수는 데이터가 기억되지 않을 수 있게 된다.
			***
			이때
			굳이 이 변수가 멤버변수임을
			명확하게 밝히고 싶은 경우가 발생하면
			이때 강제로 this라고 써주면 된다.
			
=========================================================================================

static 속성

	==> static 영역에 생겨지는 함수나 변수에 붙여주는 속성
	
	참고 ]
		클래스, 함수, 변수를 만들때 속성을 지정할 수 있다.
		
		예]
			1. 클래스
			[접근지정자]	[속성]	class 클래스이름 {}
			
			2. 함수
			[접근지정자]	[속성]	반환값타입	함수이름(매개변수리스트){}
			
			3. 변수
			[접근지정자]	[속성]	데이터타입 변수이름;
			
	static 영역의 특징
		1. 프로그램이 실행되기 위해서 JVM이 로딩하는 순간 저절로 생기는 영역이다.
			즉, 사용자가 특별히 만들어 달라고 요구하지 않아도 자동적으로 생긴다.
		
		***	
		2. 한번 생긴 변수나 함수는 두번다시 생기지 않는다.
		
	static 변수
		==> static 영역에 만들어지는 변수
			
			형식]
				
				[접근지정자]	static 데이터타입 변수이름;
				
			특징]
				
				1. 여러 오브젝트가 공동으로 사용하는 변수가 된다.
					왜?
						오브젝트를 100개를 만들어도
						static 변수는 오직 한개이므로...
					즉, 한 객체가 데이터를 바꾸면
					다른 객체도 바뀐 데이터를 사용해야 한다.
					
					따라서
					static 변수는 객체의 멤버로서의 의미가 없다.
					더군다나 객체가 없어도 사용할 수 있다.
				
				2. new 시키지 않아도 사용할 수 있는 변수이다.
					왜??
						<== 이미 메모리에 올려져 있으므로...
						
				결론 ]
					사용방법 ]
						클래스이름.변수이름
						
						으로 사용하면 된다.
						
	static 함수
		==> 변수와 마찬가지로 static 영역에 생기는 함수
			따라서 객체가 없어도 사용할 수 있다.
			
			사용법 ]
				
				클래스이름.함수이름();
				
			***
			특징 ]
				
				this 를 사용할 수 없는 함수	
				
		***
		결론 ]
			static 함수 안에서는 static 멤버만 사용할 수 있다.
			(메모리에 올려진 멤버는 모두 사용할 수 있다.)
			일반 함수 안에서는 일반 멤버와 static멤버 모두 사용할 수 있다.

---------------------------------------------------------------------------------------------


			
						
				
				
				
				
				
				
				
			
 			
 		
 		
		
				