# Collection( 컬렉션 )
==> 많은 양의 데이터를 손쉽게 보관할 수 있는 클래스들의 집합

	배열을 이용해서도 많은 양의 데이터를 보관할 수 있다.
	배열의 단점
		크기를 변경할 수 없다.
		(즉, 한번 데이터의 양을 결정하면 그 양보다 많은 데이터는 보관할 수 없다.)
		데이터의 입출력에 많은 제약사항을 갖는다.
		(반드시 위치를 알아야 데이터를 입력 또는 출력할 수 있다.)
		

종류
	
	1. List 계열
		특징 ]
			1) 입력한 순서를 보장한다.(처리속도가 느리다.)
			2) 중복 데이터를 허용한다.
			
	2. Set 계열
		특징 ]
			1) 입력순서를 보장하지 않는다.
				(나름의 규칙에 의해서 데이터를 정렬해서 보관한다.
					처리속도는 빠르다.)
			2) 중복데이터가 다시 저장되면 먼저 데이터를 삭제한 후 저장한다.
				==> 중복데이터는 한번만 저장한다.
			
	3. Map 계열 ==> Sequence 자료형이 아니다.
		특징 ]
			1) 데이터를 그 데이터를 구분하는 키값과 데이터를 한쌍으로 만들어서 저장한다.
			2) 입력순서는 보장하지 못한다.
			3) 같은 키값이 입력되면 먼저 데이터는 삭제한다.
				(==> 데이터는 같아도 되지만 키값은 같으면 안된다.)
	
	참고 ]
		
		List 계열과 Set 계열은 상위 클래스가 같지만
		Map 계열은 다르다.
		==>
		List와 Set은 다형성 처리가 가능하지만(서로 변환이 되지만)
		Map은 독립적으로 변환이 불가능 하다.
		
---------------------------------------------------------------------------------------------------

List 계열
	
	1. Vector
		==> 내부적으로는 배열 형태를 만들어서 데이터를 보관하는 컬렉션의 한 종류
		
			장점
				입력속도와 검색 속도는 빠르다.
			단점
				중간의 데이터를 삽입하거나, 데이터를 삭제하는 속도는 느리다.
			
			결론 ]
				데이터의 변화가 거의 없는 프로그램에서 많이 사용된다.
				
		생성방법( 생성자함수 )
			1)
				Vector()
				==> 배열의 크기를 10으로 정한 상태로 벡터를 만들어 준다.
					물론 데이터가 증가하면 크기는 자동 변경된다.
					이때 변경되는 규칙은
						이전 크기 * 2
			2)
				Vector(Collection c)
				==> 다른 컬렉션 데이터를 복사해서 벡터를 만들어 준다.
				
			3)
				Vector(int initialCapecity)
				==> 사용자가 직접 배열의 크기를 정하면서 벡터를 만든다.
				
			4)	*
				Vector(int initialCapecity, int capacityIncrement)
				==> 3) + 데이터의 양이 많아지면 추가될 배열의 크기를 지정해서 만든다.
				
			참고 ]
				컬렉션은 데이터의 양에 관계없이 항상 데이터를 입력 받을 수 있다.
				이때 데이터를 입력 받을 공간을 확보해야 하는데
				규칙
					현재크기 * 2
					
			주요함수 ]
				1. 데이터를 입력하는 함수
					add(Object e)
					add(int index, Object element)
					addAll(Collection c)
					addAll(int index, Collection c)
					addElement(Object obj)
					insertElementAt(Object obj, int index)
					
				2. 데이터를 수정함수
					
					set(int index, Object element)
					setElementAt(Object obj, int index)
					
				3. 데이터를 꺼내는 함수
					get(int index)
					elementAt(int index)
					firstElement()
					lastElement()
					elements()
					
			참고 ]
				E, V, K 라고 표현한 것들은 Object 를 의미하는 제너릭 용어이다.
				따라서 내일까지 Object 로 알아들을 것.
				
----------------------------------------------------------------------------------------------

	2. ArrayList
	
		==> Vector의 신버젼으로
			역시 배열 형태로 데이터를 관리하기 때문에
			Vector의 특징을 그대로 가지고 있다.
			
			다만,
			스레드에서 동기화 처리를 자동으로 해주지 않는다.
			그러다보니 데이터 처리속도가 Vector보다 빠르다.
			요사이는 Vector보다는 ArrayList 사용을 선호하는 경향이 있다.
		***	
			synchronizedList(List list) ==> List를 동기화된 리스트로 반환
			synchronizedMap(Map m)		==> Map을 동기화 처리된 Map으로 반환
			synchronizedSet(Set s)		==> Set을 동기화 처리된 Set으로 반환
			
		사용방법 ]
			Vector와 유사하다.
			
			참고 ]
				List 계열의 주소를 출력하면
				마치 데이터가 나온것 처럼 보이지만
				이것은 toString()를 오버라이드 해 놓아서 출력만 될 뿐이다.
				절대로 사용할때는 toString()를 생각하지 말자.
				이것도 역시 내용만 살펴보는 함수다.
				
				
	
	3. LinkedList
		==> 내부적으로 이중 연결 리스트 방식으로 데이터를 보관하는 방식의 컬렉션의 일종
			
			장점 ]
				데이터를 중간에 끼워넣기 작업, 삭제 작업은 속도가 빠르다.
			단점 ]
				데이터 누적시키는 작업은 속도가 느리다.
				
	
	참고클래스
		
		Iterator
		
			==> 컬렉션은 많은 클래스의 집합이고 그 형태도 다르다.
				그런데 서로 혼용될 수 있다.
				그런데 그 안에 들어있는 데이터를 꺼내는 방식은 약간씩 다르다.
				List에서 데이터를 꺼내는 방식과 Set에서 데이터를 꺼내는 방식이 다르다.
				( ==> 꺼내는 작업은 데이터원본을 다르게 만들어야 한다. )
				
				그래서 데이터를 꺼내기 위해서만 사용하는 클래스를 따로 만들어 놓았다.
				그것이 Iterator 라는 클래스이다.
				
				즉, List, Set 이던 Iterator로 변환만 시켜주면
				같은 방식으로 꺼낼 수 있으므로
				꺼내는 소스를 동일하게 꺼낼수 있게 된다.			
				
				특징 ]
					
					StringTokenizer와 유사하게 순차적으로 꺼낼 수 있고
					한번 꺼낸 데이터는 자동으로 삭제 된다.
								
				
				
				
				
				
