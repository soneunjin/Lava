# day13

추상클래스
==> 추상 함수를 0개이상 가지고 있는 클래스

	추상 함수가 한개도 없어도 강제로 추상 클래스를 만들 수 있고
	추상 함수가 한개라도 있으면 반드시 추상 클래스로 만들어야 한다.
	
	추상함수란?
		
		==> 함수의 몸체({})가 없는 함수를 말한다.
			즉, 기능이 없는 함수를 말한다.
			--> C 언어에서는 가상 함수에 해당
			
		형식]
			
			[접근지정자] 	abstract	반환값타입	함수이름(매개변수리스트);
			
		예 ]
			public abstract void abc(int a);
			

추상 클래스 만드는 방법
	
	형식 ]
		
		[접근지정자]	abstract	class	클래스이름{
		
			변수
			일반함수
			추상함수
			
		}
	
	
	왜?
		다형성 구현을 위해서....

==================================================================================

	추상 클래스 사용하는 방법
		==> 추상 클래스는 스스로 new 시킬 수 없다.
			왜냐하면 그클래스 안에는 아직 완성되지 않은 함수가 존재하기 때문이다.
			
			사용방법 ]
				
				1. 	다른클래스에 상속을 한 후
					추상함수의 기능을 만들어 주고(오버라이딩 하고)
					하위 클래스를 new 시켜서 사용하면 된다.
					==> 이런 경우는 api 를 사용하는 경우에는 10%미만이다...
					
				2. 	추상 클래스 내부에
					속성이 static 이면서
					반환값이 자신을 반환해주는 함수가 존재한다.
					
			예 ]
				
				Calendar 클래스
				
	참고 ]
		
		추상클래스가 아님에도 생성자함수가 존재하지 않는 클래스가 있다.
		또는 생성자함수의 접근 지정자를 private로 정의 해놓은 클래스가 있다.
		이런 클래스들 역시 new 시켜서 객체를 만들어서 사용할 수 없다.
		
		이때도 역시 
			속성이 static 이면서
			반환값이 자기자신인 함수를
		찾아서 사용하면 된다.

===============================================================================

문제 1]
	
	Figure 클래스를 상속 받아서 Nemo, Semo, Won 클래스를 작성하세요.
	Figure 클래스는 면적을 구해주는 추상함수만 멤버로가지고 있습니다.
	
	ArrayList에 각 도형의 인스턴스를 10개 랜덤하게 담고
	꺼내서 출력하는 프로그램을 작성하세요.
		
======================================================================================================================

인터페이스 ( Interface )
==> 클래스의 한 종류이긴 하지만 그 형태나 의미가
	지금까지 사용했던 클래스하고는 다른
	특수한 클래스의 일종이다.		
		
	1. 최상위 클래스가 Object 가 아니다.
		==> 즉, 인터페이스는 다른 클래스를 상속 받아서 만들어진 클래스가 아니다.
		
	2. 내부에는 100% 추상함수만 존재해야 한다.
		==> 절대로 일반 함수는 존재하지 않는다.
			==> 기능을 가진 함수가 존재하면 안된다.
			
		참고 ]
			
			인터페이스 내부에 선언되는 함수는
			따로 정의 하지 않아도 자동적으로
				public 접근지정자와
				abstract 속성이 부여가 된다.
				
	3. 인터페이스는 다른 클래스에 상속해줄 수 있는데
		다중 상속이가능하다.
	
	4. 변수는 가질 수 있다.
		이때 따로 선언하지 않아도 자동적으로
			
			public static final
			
		이 붙게 된다.
		
	5. 인터페이스 소속 함수는 묵시적으로 public 함수가 된다.
	

인터페이스 만드는 방법 ]
	
	[접근지정자]	interface	인터페이스이름 {
		변수		==> public static final 변수가 된다.
		함수		==> 자동적으로 public abstract 함수가 된다.
	}
	
왜 인터페이스를 만들었나요??
	==> 가끔은 JVM에 의해서 자동 호출되어야 하는 함수가 필요하다.
		따라서 함수의 존재는 필요하다.
		하지만 가끔은 이 함수가 해야할 일을 정할 수 없는 경우가 생긴다.
		이때는 그 함수의 정의는 개발자의 몫으로 넘거야 하는 경우겠다.
		
	==> 결국 인터페이스도 다형성 구현을 위해서 만들어졌다.
	
		
인터페이스 사용하기
	
	1. 인터페이스는 스스로 new 될 수 없다.
		이유는 추상클래스와 마찬가지로 추상함수를 가지고 있기 때문이다.
		
		(1)
		따라서 사용할 때는 일반 클래스에 상속해준 후 사용해야 한다.
		
		상속방법 ]
			
			class 클래스이름	implements 	인터페이스이름 {
				추상함수 오버라이딩;
			}
		
		참고 ]
			일반클래스를 상속 받는 것은 상속이라고 표현하고
			인터페이스를 상속 받는 것은 "구현"이라고 표현 한다.
			
		(2)
			상속 받은 클래스에서는 인터페이스 내부에 있는 함수(추상함수)를
			100% 오버라이드 해야 한다.
			그리고 필요한 기능은 개발자가 구현한다.
			==> 따라서 인터페이스 소속의 함수는 public 이다.
			
		(3)
			일반 클래스를 new 시켜서 사용한다.
			==> 인터페이스 타입의 변수에 상속받은 클래스의 인스턴스를 기억시킬 수 있다.
			
	참고 ]
		가끔은 속성이 static 이면서 반환값이 자기자신인 함수가 있어서 
		그 함수를 호출해서 사용하는 경우도 있다.
		그런데 인터페이스에는 기능을 가지는 함수가 존재할 수 없으므로
		다른클래스의 멤버중 이런 함수를 찾아서 사용해야 한다.
		
	참고 ]
		인터페이스는 다중 상속이 가능하다.
		
		형식 ]
			
			class	클래스이름	implements 인터페이스1,인터페이스2,... {
			
			}
			
		주의사항 ]
			이 경우는 상속해준 인터페이스의 모든 소속 함수를 100% 오버라이딩 해야 한다.
			
	참고 ]
		일반 상속과 구현은 같이 사용할 수 있다.
		
		class 일반클래스 extends	상속해줄클래스	implements 인터페이스1,인터페이스2, ...{
		
		}
		
	주의 ]
		
		반드시 extends 가 먼저 와야하고
		implements 가 나중에 와야 한다.
		
	참고 ]
		인터페이스도 다른 인터페이스를 상속받아서 만들 수 있다.
		
		형식 ]
			
			interface	인터페이스이름 extends 인터페이스 {
			
			}
		
		주의 사항 ]
			
			인터페이스가 인터페이스를 상속받는 경우에는
			extends 를 사용해야 한다.
			
		
	참고 ]
		
		인터페이스 안에도 일반 함수가 존재 할 수 있다.
		이 경우에는 반드시 함수의 속성을 default 라고 명시해야 한다.
		
		형식 ]
			
			default	반환값타입	함수이름(매개변수리스트){
				함수내용;
			}
		
==========================================================================================================================================

HomeWork ]
	
	day13.sub.Moyang 인터페이스를 
	같은 패키지내에서 구현한 사각형, 동그라미 클래스를 만들고
	추상함수 문제처럼 ArrayList에 랜덤하게 10개를 담아서
	내용을 출력하는 프로그램을 작성하세요.
	
================================================================================================

내부 클래스
	==> 클래스 안에 만들어지는 클래스를 내부 클래스라 한다.
	
	종류 ]
		
		1. Top Level Inner Class
			==> 형식은 내부클래스이지만 독립적으로 활동하는 클래스
			
			형식 ]
				
				static class 클래스이름 {}
				
				내부에 만들면서 static 이 붙으면 Top Level Inner Class 가 된다.
				
			==>
				일반 클래스와는 달리 내부 클래스의 이름은
					바깥클래스.내부클래스
				의 형식을 취한다.
			
		*****	
		2. 전역 Inner Class
			==> 일반 클래스를 내부 클래스로 만든 것
				(이 클래스가 우리가 내부 클래스라 부르는 것)
				
				형식 ]
					
					class	클래스이름 {
					}
				
				특징 ]
					1. 바깥 클래스의 모든 멤버는
						저절로 자기멤버처럼 사용할 수 있다.
					
					2. 반드시 바깥 클래스가 new 된 이후에 안쪽 클래스를 생성할 수 있다.
						
						형식 ]
							
							바깥클래스주소.new 안쪽클래스이름();
							
					3. 바깥 클래스는 안쪽 클래스를 멤버를 사용할 수 없고
						사용하기를 원하면 new 시켜서 사용해야 한다.
						
			주로 바깥클래스와 연관된 기능을 가진 클래스를 만들고 싶을 때
			많이 사용하는 방법
		
		3. 지역 Inner Class
		
			==> 내부 클래스 만드는 위치가 바깥 클래스의 함수 내부에서 만들어 지는 클래스
			
			class Test {
				int a;
				
				class Inner(){ // 전역 Inner Class
				}
				void abc(){
					int b;
					
					class Inner{} // 지역 Inner Class
				}
			}
			
			특징 ]
				1. 전역 Inner Class와 유사하게 바깥 클래스의 멤버를 사용할 수 있다.
				2. 다른곳에서 new 시킬 수 없다.
					오직 해당 함수 안에서만 new 시킬 수 있다.
					
					
				
		
		4. 무명(익명) Inner Class
			
			==> 말 그대로 이름이 없는 클래스를 말한다.
			
				우리가 프로그램을 만들다 보면
				클래스의 기능수정을 위해서 오버라이딩을 해야할 경우가 발생한다.
				(어쩔 수 없이 오버라이드 해야하는 경우도 있고..)
				
				이때 원칙적으로는
				다른 클래스를 만들고 그 클래스에 필요한 클래스를 상속을 한 후
				오버라이드를 해야 한다.
				
				이때 간단한 내용을 오버라이드 해야 하는 경우
				그 기능 하나 때문에 클래스를 따로 만들어야 하는 불편한 상황이 발생 할 수 있다.
				
				이런 경우를 위해서 만들어서 사용하는 클래스로
				클래스를 new 시키는 순간 필요한 기능을 오버라이드해서 사용하는 방법
				
				즉, 사용자가 클래스이름을 만들지 않아도 된다..
				라는 의미에서 무명(익명)이라고 부른다.
				
				형식 ]
					
					new 클래스이름(){}
		
		 			
			